name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: student-performance-predictor
  BACKEND_APP_NAME: student-predictor-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src/
        
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-backend:
    name: Deploy Backend to Render
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Deploy to Render
      run: |
        echo "Starting Render deployment..."
        
        # First, verify the service exists
        echo "Verifying service exists..."
        SERVICE_INFO=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}")
        
        if echo "$SERVICE_INFO" | grep -q "not found\|404"; then
          echo "❌ Error: Service not found. Please check RENDER_SERVICE_ID"
          echo "Service ID: ${{ secrets.RENDER_SERVICE_ID }}"
          echo "Response: $SERVICE_INFO"
          exit 1
        fi
        
        echo "✅ Service found. Triggering deployment..."
        
        # Trigger Render deployment via API
        DEPLOY_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
        
        echo "Deploy response: $DEPLOY_RESPONSE"
        
        if echo "$DEPLOY_RESPONSE" | grep -q "error\|not found\|404"; then
          echo "❌ Error triggering deployment"
          echo "Response: $DEPLOY_RESPONSE"
          exit 1
        fi
        
        echo "✅ Render deployment triggered successfully!"
        
        # Wait a bit for deployment to start
        sleep 15
        
        # Check deployment status with better error handling
        echo "Checking deployment status..."
        DEPLOYS_RESPONSE=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
        
        echo "Deploys response: $DEPLOYS_RESPONSE"
        
        # Check if response is valid JSON
        if ! echo "$DEPLOYS_RESPONSE" | jq . > /dev/null 2>&1; then
          echo "❌ Invalid JSON response from Render API"
          echo "Response: $DEPLOYS_RESPONSE"
          exit 1
        fi
        
        # Extract deployment status
        DEPLOY_STATUS=$(echo "$DEPLOYS_RESPONSE" | jq -r '.deploys[0].status // "unknown"')
        
        if [ "$DEPLOY_STATUS" = "null" ] || [ "$DEPLOY_STATUS" = "unknown" ]; then
          echo "⚠️ Could not determine deployment status"
          echo "Response: $DEPLOYS_RESPONSE"
          echo "Proceeding anyway..."
        else
          echo "Current deployment status: $DEPLOY_STATUS"
        fi
        
        echo "✅ Render deployment process completed!"
        echo "Check your Render dashboard for final status: https://dashboard.render.com"

  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod' 